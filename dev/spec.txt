# The FRAME spec

## Visual
- Resolution: 64x64
- Colors: 16

## Architecture
- Memory: 16-bit (0x0000-0xffff)
- Registers: 16

## Memory Mapping
- 0x0000-0x00ff: Zero-page
- 0x0100-0x01ff: Stack
- 0x0200-0xdfff: Program memory
- 0xe000-0xe7bf: Kernel
- 0xe7c0-0xe7ff: Text Mode data
- 0xe800-0xec00: Font data
- 0xec00-0xefff: Screen data

## Instruction Set
### hlt
Halts execution or emits syscall
- hlt:     Halts execution
- hlt [a]: Emits the syscall that corresponds to the value in register [a]
- hlt [k]: Emits the syscall that corresponds to value [k]

### mov
Moves a value from one place to another
- mov [a], [%], [b]: Moves the value in address ([%] + the value in register [b])
                     into register [a]
- mov [a], [i], [b]: Moves the value in address ((i) + the value in register [b])
                     into register [a]
- mov [a], [%], [k]: Moves the value in address ([%] + value [k]) into register [a]
- mov [a], [i], [k]: Moves the value in address (((i) + value [k]) into register [a]
- mov [%], [a], [b]: Moves the value in register [b] into address ([%] + the value
                     in register [a])
- mov [%], [a], [k]: Moves value [k] into address ([%] + the value in register [a])
- mov [a], [b]:      Moves the value in register [b] into register [a]
- mov [a], [k]:      Moves value [k] into register [a]
- mov [a], [%]:      Moves the value in address [%] into register [a]
- mov [k], [a]:      Moves the value in register [a] into zero-page address [k]
- mov [k], [l]:      Moves value [l] into zero-page address [k]
- mov [%], [a]:      Moves the value in register [a] into address [%]
- mov [%], [k]:      Moves value [k] into address [%]

### jmp
Performs an unconditional jump
- jmp [%], [a]: Jumps to address ([%] + the value in register [a])
- jmp [%], [k]: Jumps to address ([%] + value [k])
- jmp [%]:      Jumps to address [%]

### jmpt
Performs a conditional jump if the conditional flag is non-zero (true)
- jmpt [%], [a]: Jumps to address ([%] + the value in register [a])
- jmpt [%], [k]: Jumps to address ([%] + value [k])
- jmpt [%]:      Jumps to address [%]

### jmpf
Performs a conditional jump if the conditional flag is zero (false)
- jmpf [%], [a]: Jumps to address ([%] + the value in register [a])
- jmpf [%], [k]: Jumps to address ([%] + value [k])
- jmpf [%]:      Jumps to address [%]

### equ
Compares two values for equality and sets the conditional flag accordingly
- equ [a], [b]: Compares the value in register [a] with the value in register [b]
- equ [a], [k]: Compares the value in register [a] with value [k]

### lss
Checks if one value is less than the other and sets the conditional flag accordingly
- lss [a], [b]: Compares the value in register [a] with the value in register [b]
- lss [a], [k]: Compares the value in register [a] with value [k]

### and
ANDs (a & b) two values together
- and [a], [b], [c]: ANDs the value in register [b] with the value in register [c]
                     and stores the result in register [a]
- and [a], [b], [k]: ANDs the value in register [b] with value [k], and stores the
                     result in register [a]
- and [a], [b]:      ANDs the register [a] in-place with the value in register [b]
- and [a], [k]:      ANDs the register [a] in-place with value in [k]

### or
ORs (a | b) two values together
- or [a], [b], [c]: ORs the value in register [b] with the value in register [c]
                    and stores the result in register [a]
- or [a], [b], [k]: ORs the value in register [b] with value [k], and stores the
                    result in register [a]
- or [a], [b]:      ORs the register [a] in-place with the value in register [b]
- or [a], [k]:      ORs the register [a] in-place with value in [k]

### not
Negates (!a) a value, so that zero becomes one, and non-zero values become zero
- not [a], [b]: Negates the value in register [b] and stores the result in
                register [a]
- not [a], [k]: Negates value [k] and stores the result in register [a]
- not [a]:      Negates the conditional flag and stores the result in register [a]
- not:          Negates the conditional flag

### lsh
Shifts a value's bits left by some amount (a << k)
- lsh [a], [b], [c]: Left-shifts the bits of the value in register [b] by the value
                     in register [c] and stores the result in register [a]
- lsh [a], [b], [k]: Left-shifts the bits of the value in register [b] by value [k]
                     and stores the result in register [a]
- lsh [a], [b]:      Left-shifts the bits of the value in register [a] in-place by
                     the value in register [c]
- lsh [a], [k]:      Left-shifts the bits of the value in register [a] in-place by
                     value [k]
- lsh [a]:           Left-shifts the bits of the value in register [a] in-place by
                     one (shorter version of lsh [a], 1)

### rsh
Shifts a value's bits right by some amount (a >> k)
- rsh [a], [b], [c]: Right-shifts the bits of the value in register [b] by the value
                     in register [c] and stores the result in register [a]
- rsh [a], [b], [k]: Right-shifts the bits of the value in register [b] by value [k]
                     and stores the result in register [a]
- rsh [a], [b]:      Right-shifts the bits of the value in register [a] in-place by
                     the value in register [c]
- rsh [a], [k]:      Right-shifts the bits of the value in register [a] in-place by
                     value [k]
- rsh [a]:           Right-shifts the bits of the value in register [a] in-place by
                     one (shorter version of rsh [a], 1)

### add
Adds two values
- add [a], [b], [c]: Sums the value in register [b] with the value in register [c]
                     and stores the result in register [a]
- add [a], [b], [k]: Sums the value in register [b] with value [k] and stores the
                     result in register [a]
- add [a], [b]:      Sums the register [a] in-place with the value in register [b]
- add [a], [k]:      Sums the register [a] in-place with value [k]

### inc
Increments a value by one
- inc [a]: Increments the value in register [a] in-place
- inc [%]: Increments the value at address [%] in-place

### dec
Decrements a value by one
- dec [a]: Decrements the value in register [a] in-place
- dec [%]: Decrements the value at address [%] in-place

### call
Calls a subroutine
- call [%]: Calls the subroutine at address [%]

### ret
Returns from a subroutine
- ret: Returns from a subroutine

### push
Pushes a value to the stack
- push [a]: Pushes the value in register [a] to the stack
- push [k]: Pushes value [k] to the stack

### pop
Pops a value from the stack
- pop [a] Pops a value from the stack and stores it in register [a]
- pop:    Pops a value from the stack

### sei
Sets the value of the interrupt flag
- sei [a]: Sets the interrupt flag to the value in register [a]
- sei [k]: Sets the interrupt flag to value [k]
- sei:     Sets the interrupt flag to non-zero

## Instruction Formats

### O
|7 6 5 4 3 2 1 0|
|opcode         |

### A
|7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0|
|-------|A      | |opcode         |

### K
|7 6 5 4 3 2 1 0| |7 6 5 4 3 2 1 0|
|constant       | |opcode         |

### P
|7 6 5 4 3 2 1 0| |7 6 5 4 3 2 1 0| |7 6 5 4 3 2 1 0|
|address (hi)   | |address (lo)   | |opcode         |

### AB
|7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0|
|B      |A      | |opcode         |

### AK
|7 6 5 4 3 2 1 0| |7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0|
|constant       | |-------|A      | |opcode         |

### AP
|7 6 5 4 3 2 1 0| |7 6 5 4 3 2 1 0| |7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0|
|address (hi)   | |address (lo)   | |-------|A      | |opcode         |

### PA
|7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0| |7 6 5 4 3 2 1 0| |7 6 5 4 3 2 1 0|
|-------|A      | |address (hi)   | |address (lo)   | |opcode         |

### PK
|7 6 5 4 3 2 1 0| |7 6 5 4 3 2 1 0| |7 6 5 4 3 2 1 0| |7 6 5 4 3 2 1 0|
|constant       | |address (hi)   | |address (lo)   | |opcode         |

### ABC
|7 6 5 4|3 2 1 0| |7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0|
|-------|C      | |B      |A      | |opcode         |

### ABK
|7 6 5 4 3 2 1 0| |7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0|
|constant       | |B      |A      | |opcode         |

### APB/PAB
|7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0| |7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0|
|B      |A      | |address (hi)   | |address (lo)   | |opcode         |

### APK/PAK
|7 6 5 4 3 2 1 0| |7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0| |7 6 5 4|3 2 1 0| |7 6 5 4 3 2 1 0|
|constant       | |-------|A      | |address (hi)   | |address (lo)   | |opcode         |

## Assembler
- Instructions: mov, add, sub, etc.
- Labels: @label
- Numbers: 1, -6, 0xf3, 0b0110, 0o777, etc.
- Identifiers: my_Cool_Identifier_3, r0, etc.
